---
title: Ruby Tutorial
---

<div>
    <h1>Ruby Tutorial</h1>
    <div>
        <div id="intro">
            <h2>Introduction</h2>
            <h3>What is Ruby?</h3>
            <p>Ruby is "a dynamic, open sourced programming language with a focus on simplicity and productivity." Designed and developed in the mid-1990s by Yukihiro "Matz" Matsumoto in Japan, Ruby was influenced by Perl, Smaltalk, Eiffel, Ada, and Lisp. With a chief focus in flexibility, Ruby supports multiple programming paradigms, including funcitonal, object oriented, and imperative. Futhermore, Ruby is dynamically typed and employs an automatic memeory management system. </p>
        </div>
        <div id="getting_started">
            <h2>Getting Started</h2>
            <h3>Installation</h3>
            <p>
                Before we start with the Ruby installation I'm going to assume that you are running Unbuntu or some other Linux distribution, either natively or in a virtual machine. If not, please make sure that you are                       before proceeding with the Ruby installation. Secondly, make sure that your distribution is up to date before proceeding.
            </p>
            <o1>
                <li>Install rbenv and ruby-build by running the following commands in the terminal:
                    <pre><code>$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
$ echo 'eval "$(rbenv init -)"' >> ~/.bashrc

$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
$ exec $SHELL</code></pre>
                </li>
                <li>Next, install Ruby with the following commands in the terminal:
                    <pre><code># first install some Ruby dependencies
$ sudo apt-get install zlib1g-dev build-essential libssl-dev libreadline-dev
libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev

$ rbenv install 2.1.2
$ rbenv global 2.1.2  # set default ruby version
$ ruby -v # confirm it works</code></pre>
                </li>
            </o1>
        </div>
        <div id="strings">
            <h2>Strings, Numbers, Classes, and Objects</h2>
            <h3>Ruby Input</h3>
            <p>
                Compared to Java, Ruby is easier in receiving input and outputting things. In Java, you would need to import java.util.Scanner and then create a Scanner object to receive input. With Ruby, there are no necessary imports or class methods to receive an input string. All you have to do is call the method <i>gets()</i>. Let's say you want to prompt the user for his/her name. Here is what the code would be:
<pre><code>print('What is your name? ')
name = gets()
puts("Hey #{name}!")
</code></pre>
                If you were to give it "Andy", then it would ouput: "Hey Andy!". Notice that I've used two methods of output. The first was using <i>print()</i> and the second was <i>puts()</i>. The <i>print</i> method will print the statement contained in parenthesis' without attaching a new line at the end. On the other hand, the <i>puts</i> method will append a new line. This is similar to Java with the <i>print</i> and <i>println</i> statement.
                In addition, notice that the variable is not predeclared or been specified a type before being assigned to the return value of <i>gets</i>. You may create them whenever you please, and Ruby will handle the work of inferring the types of the variables you create.
            </p>
            <h3>Strings and Embedded Evaluation</h3>
            <p>
                Let's take a look at the last line of our code:
                <pre><code>puts("Hey #{name}!")</code></pre>
                The variable is being called inside the <i>puts</i> statement by placing it between two curly brackets preceded with a hash mark, #{}. This only works with strings delimited by double quotes; if you were to use single quotes, then the <i>puts</i> statement would display exactly as read 'Hey #{name}!'.
            </p>

        <div id="arguments">
            <h2>Passing Arguments and Returning Values</h2>
            <h3>Returning Values</h3>
            <p>
                Unlike many other languages, Ruby methods <i>always</i> return a value. If no return value is specified, then a Ruby method will return the result of the last expression evaluated in the method.                                 For example, in the code below, the method would return <code>k</code> with a value of 0.
            </p>
            <pre><code>def test
    i = 100
    j = 10
    k = 0
end</code></pre>
            <p>
                Of course, if you want to return a different value, you can specify that with the <code>return</code> keyword as shown below. So here, in <code>method2</code>, instead of returning 3, or <code>a+b</code>, the method will return <code>b</code>'s value of 2 because it is explicitly stated.
            </p>
            <pre><code>def method2
    a = 1
    b = 2
    c = a + b
    return b   # returns 2
end</code></pre>
            <p></p>
        </div>
    </div>
</div>
